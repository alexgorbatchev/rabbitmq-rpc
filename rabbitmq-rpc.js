// Generated by CoffeeScript 1.6.3
var RabbitMQRPC, amqp, uuid;

amqp = require('amqp');

uuid = require('uuid');

module.exports = RabbitMQRPC = (function() {
  function RabbitMQRPC() {}

  RabbitMQRPC.prototype.connect = function(opts, done) {
    var _this = this;
    this.subscriptionsPending = 0;
    this.connection = amqp.createConnection(opts);
    return this.connection.once('ready', function() {
      _this.exchange = _this.connection.exchange('rpc-exchange123a', {
        confirm: true,
        type: 'topic'
      });
      _this.exchange.on('error', function(err) {
        return console.log(err);
      });
      return done();
    });
  };

  RabbitMQRPC.prototype.subscribe = function(routingKey, callback) {
    var _this = this;
    this.subscriptionsPending++;
    return this.connection.queue("rpc-queue-" + routingKey, {
      durable: true
    }, function(queue) {
      queue.on('queueBindOk', function() {
        var promise;
        promise = queue.subscribe({
          ack: true,
          prefetchCount: 1
        }, function(message, headers, deliveryInfo) {
          return callback(null, message, function(err, response) {
            var correlationId;
            correlationId = deliveryInfo.correlationId;
            _this.exchange.publish(correlationId, response || null, {
              correlationId: correlationId,
              mandatory: true
            });
            return queue.shift();
          });
        });
        return promise.addCallback(function() {
          return _this.subscriptionsPending--;
        });
      });
      queue.on('error', function(err) {
        return console.log(err);
      });
      return queue.bind(_this.exchange, routingKey);
    });
  };

  RabbitMQRPC.prototype.publish = function(routingKey, message, callback) {
    var correlationId, send,
      _this = this;
    if (this.subscriptionsPending !== 0) {
      return setTimeout(function() {
        return _this.publish(routingKey, message, callback);
      }, 1);
    }
    correlationId = "" + routingKey + "-" + (uuid.v4());
    send = function() {
      return _this.exchange.publish(routingKey, message, {
        correlationId: correlationId,
        mandatory: true
      });
    };
    return this.connection.queue(routingKey, {
      durable: true
    }, function(queue) {
      queue.on('queueBindOk', function() {
        var promise;
        promise = queue.subscribe({
          ack: true,
          prefetchCount: 1
        }, function(message, headers, deliveryInfo) {
          queue.unsubscribe(deliveryInfo.consumerTag);
          if (typeof callback === "function") {
            callback(null, message);
          }
          return queue.shift();
        });
        promise.addCallback(send);
        return promise.addErrback(function(err) {
          return console.log(err);
        });
      });
      queue.on('error', function(err) {
        return console.log(err);
      });
      return queue.bind(_this.exchange, correlationId);
    });
  };

  return RabbitMQRPC;

})();
